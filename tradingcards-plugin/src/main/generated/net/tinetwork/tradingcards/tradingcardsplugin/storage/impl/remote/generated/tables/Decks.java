/*
 * This file is generated by jOOQ.
 */
package net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables;


import java.util.function.Function;

import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.DefaultSchema;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.Keys;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.DecksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Decks extends TableImpl<DecksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>{prefix}decks</code>
     */
    public static final Decks DECKS = new Decks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DecksRecord> getRecordType() {
        return DecksRecord.class;
    }

    /**
     * The column <code>{prefix}decks.id</code>.
     */
    public final TableField<DecksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>{prefix}decks.uuid</code>.
     */
    public final TableField<DecksRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>{prefix}decks.deck_number</code>.
     */
    public final TableField<DecksRecord, Integer> DECK_NUMBER = createField(DSL.name("deck_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>{prefix}decks.card_id</code>.
     */
    public final TableField<DecksRecord, String> CARD_ID = createField(DSL.name("card_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>{prefix}decks.rarity_id</code>.
     */
    public final TableField<DecksRecord, String> RARITY_ID = createField(DSL.name("rarity_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>{prefix}decks.amount</code>.
     */
    public final TableField<DecksRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>{prefix}decks.is_shiny</code>.
     */
    public final TableField<DecksRecord, Boolean> IS_SHINY = createField(DSL.name("is_shiny"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>{prefix}decks.series_id</code>.
     */
    public final TableField<DecksRecord, String> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.field(DSL.raw("'${default_series_id}'"), SQLDataType.VARCHAR)), this, "");

    private Decks(Name alias, Table<DecksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Decks(Name alias, Table<DecksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>{prefix}decks</code> table reference
     */
    public Decks(String alias) {
        this(DSL.name(alias), DECKS);
    }

    /**
     * Create an aliased <code>{prefix}decks</code> table reference
     */
    public Decks(Name alias) {
        this(alias, DECKS);
    }

    /**
     * Create a <code>{prefix}decks</code> table reference
     */
    public Decks() {
        this(DSL.name("{prefix}decks"), null);
    }

    public <O extends Record> Decks(Table<O> child, ForeignKey<O, DecksRecord> key) {
        super(child, key, DECKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DecksRecord, Integer> getIdentity() {
        return (Identity<DecksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DecksRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public Decks as(String alias) {
        return new Decks(DSL.name(alias), this);
    }

    @Override
    public Decks as(Name alias) {
        return new Decks(alias, this);
    }

    @Override
    public Decks as(Table<?> alias) {
        return new Decks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(String name) {
        return new Decks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(Name name) {
        return new Decks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(Table<?> name) {
        return new Decks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Integer, String, String, Integer, Boolean, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super Integer, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super Integer, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
