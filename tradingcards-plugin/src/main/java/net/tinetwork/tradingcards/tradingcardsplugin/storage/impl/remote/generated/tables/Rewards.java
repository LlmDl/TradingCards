/*
 * This file is generated by jOOQ.
 */
package net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables;


import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.Keys;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.Minecraft;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.RewardsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rewards extends TableImpl<RewardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minecraft.rewards</code>
     */
    public static final Rewards REWARDS = new Rewards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RewardsRecord> getRecordType() {
        return RewardsRecord.class;
    }

    /**
     * The column <code>minecraft.rewards.rarity_id</code>.
     */
    public final TableField<RewardsRecord, String> RARITY_ID = createField(DSL.name("rarity_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>minecraft.rewards.command</code>.
     */
    public final TableField<RewardsRecord, String> COMMAND = createField(DSL.name("command"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>minecraft.rewards.command_order</code>.
     */
    public final TableField<RewardsRecord, Integer> COMMAND_ORDER = createField(DSL.name("command_order"), SQLDataType.INTEGER.nullable(false), this, "");

    private Rewards(Name alias, Table<RewardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rewards(Name alias, Table<RewardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>minecraft.rewards</code> table reference
     */
    public Rewards(String alias) {
        this(DSL.name(alias), REWARDS);
    }

    /**
     * Create an aliased <code>minecraft.rewards</code> table reference
     */
    public Rewards(Name alias) {
        this(alias, REWARDS);
    }

    /**
     * Create a <code>minecraft.rewards</code> table reference
     */
    public Rewards() {
        this(DSL.name("rewards"), null);
    }

    public <O extends Record> Rewards(Table<O> child, ForeignKey<O, RewardsRecord> key) {
        super(child, key, REWARDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Minecraft.MINECRAFT;
    }

    @Override
    public UniqueKey<RewardsRecord> getPrimaryKey() {
        return Keys.KEY_REWARDS_PRIMARY;
    }

    @Override
    public Rewards as(String alias) {
        return new Rewards(DSL.name(alias), this);
    }

    @Override
    public Rewards as(Name alias) {
        return new Rewards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rewards rename(String name) {
        return new Rewards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rewards rename(Name name) {
        return new Rewards(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
